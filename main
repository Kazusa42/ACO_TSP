import math
import random
from matplotlib import pyplot as plt

POSITION_FILE_PATH = r'./Bier127_Cities_position.txt'


class SolveTSPUsingACO:
    class Edge:
        def __init__(self, a, b, weight, initial_pheromone):
            self.a = a
            self.b = b
            self.weight = weight
            self.pheromone = initial_pheromone

    class Ant:
        def __init__(self, alpha, beta, num_nodes, edges):
            self.alpha = alpha
            self.beta = beta
            self.num_nodes = num_nodes
            self.edges = edges
            self.tour = None
            self.distance = 0.0

        def _select_node(self):
            roulette_wheel = 0.0
            unvisited_nodes = [node for node in range(self.num_nodes) if node not in self.tour]
            heuristic_total = 0.0
            for unvisited_node in unvisited_nodes:
                heuristic_total += self.edges[self.tour[-1]][unvisited_node].weight
            for unvisited_node in unvisited_nodes:
                roulette_wheel += pow(self.edges[self.tour[-1]][unvisited_node].pheromone, self.alpha) * \
                                  pow((heuristic_total / self.edges[self.tour[-1]][unvisited_node].weight), self.beta)
            random_value = random.uniform(0.0, roulette_wheel)
            wheel_position = 0.0
            for unvisited_node in unvisited_nodes:
                wheel_position += pow(self.edges[self.tour[-1]][unvisited_node].pheromone, self.alpha) * \
                                  pow((heuristic_total / self.edges[self.tour[-1]][unvisited_node].weight), self.beta)
                if wheel_position >= random_value:
                    return unvisited_node

        def find_tour(self):
            self.tour = [random.randint(0, self.num_nodes - 1)]
            while len(self.tour) < self.num_nodes:
                self.tour.append(self._select_node())
            return self.tour

        def get_distance(self):
            self.distance = 0.0
            for i in range(self.num_nodes):
                self.distance += self.edges[self.tour[i]][self.tour[(i + 1) % self.num_nodes]].weight
            return self.distance

    def __init__(self, mode='ACS', colony_size=10, elitist_weight=1.0, min_scaling_factor=0.001, alpha=1.0, beta=3.0,
                 rho=0.1, pheromone_deposit_weight=1.0, initial_pheromone=1.0, steps=100, nodes=None, labels=None):
        self.mode = mode
        self.colony_size = colony_size
        self.elitist_weight = elitist_weight
        self.min_scaling_factor = min_scaling_factor
        self.rho = rho
        self.pheromone_deposit_weight = pheromone_deposit_weight
        self.steps = steps
        self.num_nodes = len(nodes)
        self.nodes = nodes
        if labels is not None:
            self.labels = labels
        else:
            self.labels = range(1, self.num_nodes + 1)
        self.edges = [[None] * self.num_nodes for _ in range(self.num_nodes)]
        for i in range(self.num_nodes):
            for j in range(i + 1, self.num_nodes):
                self.edges[i][j] = self.edges[j][i] = self.Edge(i, j, math.sqrt(
                    pow(float(self.nodes[i][0]) - float(self.nodes[j][0]), 2.0) +
                    pow(float(self.nodes[i][1]) - float(self.nodes[j][1]), 2.0)),
                                                                initial_pheromone)
        self.ants = [self.Ant(alpha, beta, self.num_nodes, self.edges) for _ in range(self.colony_size)]
        self.global_best_tour = None
        self.global_best_distance = float("inf")

    def _add_pheromone(self, tour, distance, weight=1.0):
        pheromone_to_add = self.pheromone_deposit_weight / distance
        for i in range(self.num_nodes):
            self.edges[tour[i]][tour[(i + 1) % self.num_nodes]].pheromone += weight * pheromone_to_add

    def _acs(self, result_list):
        for step in range(self.steps):
            for ant in self.ants:
                self._add_pheromone(ant.find_tour(), ant.get_distance())
                if ant.distance < self.global_best_distance:
                    self.global_best_tour = ant.tour
                    self.global_best_distance = ant.distance
            result_list.append(self.global_best_distance)
            for i in range(self.num_nodes):
                for j in range(i + 1, self.num_nodes):
                    self.edges[i][j].pheromone *= (1.0 - self.rho)

    def _acs_exp(self, result_list):
        for step in range(self.steps):
            for ant in self.ants:
                tour = ant.find_tour()
                distance = ant.get_distance()
                if self.global_best_distance == float('inf'):
                    rate = 1.0
                else:
                    rate = math.exp(self.global_best_distance / distance - 1)
                self._add_pheromone(tour, distance, rate)
                if ant.distance < self.global_best_distance:
                    self.global_best_tour = ant.tour
                    self.global_best_distance = ant.distance
            result_list.append(self.global_best_distance)
            for i in range(self.num_nodes):
                for j in range(i + 1, self.num_nodes):
                    self.edges[i][j].pheromone *= (1.0 - self.rho)

    def _elitist(self, result_list):
        for step in range(self.steps):
            for ant in self.ants:
                self._add_pheromone(ant.find_tour(), ant.get_distance())
                if ant.distance < self.global_best_distance:
                    self.global_best_tour = ant.tour
                    self.global_best_distance = ant.distance
            result_list.append(self.global_best_distance)
            self._add_pheromone(self.global_best_tour, self.global_best_distance, weight=self.elitist_weight)
            for i in range(self.num_nodes):
                for j in range(i + 1, self.num_nodes):
                    self.edges[i][j].pheromone *= (1.0 - self.rho)

    def _max_min(self, result_list):
        for step in range(self.steps):
            iteration_best_tour = None
            iteration_best_distance = float("inf")
            for ant in self.ants:
                ant.find_tour()
                if ant.get_distance() < iteration_best_distance:
                    iteration_best_tour = ant.tour
                    iteration_best_distance = ant.distance
            if float(step + 1) / float(self.steps) <= 0.2:
                self._add_pheromone(iteration_best_tour, iteration_best_distance)
                max_pheromone = self.pheromone_deposit_weight / iteration_best_distance
            else:
                if iteration_best_distance < self.global_best_distance:
                    self.global_best_tour = iteration_best_tour
                    self.global_best_distance = iteration_best_distance
                self._add_pheromone(self.global_best_tour, self.global_best_distance)
                max_pheromone = self.pheromone_deposit_weight / self.global_best_distance
            result_list.append(self.global_best_distance)
            min_pheromone = max_pheromone * self.min_scaling_factor
            for i in range(self.num_nodes):
                for j in range(i + 1, self.num_nodes):
                    self.edges[i][j].pheromone *= (1.0 - self.rho)
                    if self.edges[i][j].pheromone > max_pheromone:
                        self.edges[i][j].pheromone = max_pheromone
                    elif self.edges[i][j].pheromone < min_pheromone:
                        self.edges[i][j].pheromone = min_pheromone

    def run(self, result_list):
        print('Started : {0}'.format(self.mode))
        if self.mode == 'ACS':
            self._acs(result_list)
        elif self.mode == 'Elitist':
            self._elitist(result_list)
        elif self.mode == 'ACS_EXP':
            self._acs_exp(result_list)
        elif self.mode == 'ACS_CUBE':
            self._acs_exp(result_list)
        else:
            self._max_min(result_list)
        # print('Ended : {0}'.format(self.mode))
        # print('Sequence : <- {0} ->'.format(' - '.join(str(self.labels[i]) for i in self.global_best_tour)))
        print('Total distance travelled to complete the tour : {0}\n'.format(round(self.global_best_distance, 2)))

    def plot(self, line_width=1, point_radius=math.sqrt(2.0), annotation_size=8, dpi=120, save=True, name=None):
        x = [self.nodes[i][0] for i in self.global_best_tour]
        x.append(x[0])
        y = [self.nodes[i][1] for i in self.global_best_tour]
        y.append(y[0])
        plt.plot(x, y, linewidth=line_width)
        plt.scatter(x, y, s=math.pi * (point_radius ** 2.0))
        plt.title(self.mode)
        x_axis = plt.gca().xaxis
        for label in x_axis.get_ticklabels():
            label.set_rotation(90)
        for i in self.global_best_tour:
            plt.annotate(self.labels[i], self.nodes[i], size=annotation_size)
        if save:
            if name is None:
                name = '{0}.png'.format(self.mode)
            plt.savefig(name, dpi=dpi)
        plt.show()
        plt.gcf().clear()


if __name__ == '__main__':
    evaluate = 1
    eva_stable = 0
    eva_convergence_speed = 1

    result_acs = []
    result_elitist = []
    result_maxmin = []

    result_acs_exp = []
    result_acs_cube = []

    _nodes = []
    with open(POSITION_FILE_PATH, 'r') as f:
        for line in f.readlines():
            if line[0] != '#':
                x = float(line.strip('\n').split(' ')[1])
                y = float(line.strip('\n').split(' ')[2])
                _nodes.append((x, y))

    if not evaluate:
        _colony_size = 10
        _steps = 500

        # acs = SolveTSPUsingACO(mode='ACS', colony_size=_colony_size, steps=_steps, nodes=_nodes)
        # acs.run(result_acs)
        # acs.plot()

        flag = 0
        if flag:
            elitist = SolveTSPUsingACO(mode='Elitist', colony_size=_colony_size, steps=_steps, nodes=_nodes)
            elitist.run(result_elitist)
            elitist.plot()
            max_min = SolveTSPUsingACO(mode='MaxMin', colony_size=_colony_size, steps=_steps, nodes=_nodes)
            max_min.run(result_maxmin)
            max_min.plot()

    if eva_convergence_speed:
        print('Start convergence speed evaluate.\n')
        _colony_size = 15

        _steps1 = [i for i in range(1, 101, 10)]
        _steps2 = [i for i in range(102, 513, 25)]
        # _steps = _steps1 + _steps2

        _steps = [i for i in range(1000)]
        '''
        for _step in _steps:
            print(_step)
            acs = SolveTSPUsingACO(mode='ACS', colony_size=_colony_size, steps=500, nodes=_nodes)
            acs.run(result_acs)
            if 0:
                # elitist = SolveTSPUsingACO(mode='Elitist', colony_size=_colony_size, steps=_step, nodes=_nodes)
                # elitist.run(result_elitist)
                max_min = SolveTSPUsingACO(mode='MaxMin', colony_size=_colony_size, steps=_step, nodes=_nodes)
                max_min.run(result_maxmin)
        '''
        acs = SolveTSPUsingACO(mode='ACS', colony_size=_colony_size, steps=1000, nodes=_nodes)
        acs.run(result_acs)
        '''
        acs_exp = SolveTSPUsingACO(mode='ACS_EXP', colony_size=_colony_size, steps=500, nodes=_nodes)
        acs_exp.run(result_acs_exp)
        acs_cube = SolveTSPUsingACO(mode='ACS_CUBE', colony_size=_colony_size, steps=500, nodes=_nodes)
        acs_cube.run(result_acs_cube)

        elitist = SolveTSPUsingACO(mode='Elitist', colony_size=_colony_size, steps=500, nodes=_nodes)
        elitist.run(result_elitist)
        max_min = SolveTSPUsingACO(mode='MaxMin', colony_size=_colony_size, steps=500, nodes=_nodes)
        max_min.run(result_maxmin)
        '''
        plt.plot(_steps, result_acs, color='#708090', label='acs', linewidth=1)
        # plt.plot(_steps, result_elitist, color='#DC143C', label='elitist', linewidth=1)
        # plt.plot(_steps, result_maxmin, color='#4169E1', label='maxmin', linewidth=1)
        # plt.plot(_steps, result_acs_cube, '#DC143C', label='acs_cube', linewidth=1.5)
        # plt.plot(_steps, result_acs_exp, '#4169E1', label='acs_exp', linewidth=1.5)
        # plt.xscale('log')
        plt.xlabel(xlabel='Iteration', fontsize=24)
        plt.ylabel(ylabel='Global best distance', fontsize=24)
        plt.legend(fontsize=16)
        plt.show()





